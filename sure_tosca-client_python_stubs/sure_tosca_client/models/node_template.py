# coding: utf-8

"""
    tosca-sure

    TOSCA Simple qUeRy sErvice (SURE).   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: S.Koulouzis@uva.nl
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NodeTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'derived_from': 'str',
        'properties': 'dict(str, object)',
        'requirements': 'list[dict(str, object)]',
        'interfaces': 'dict(str, object)',
        'capabilities': 'dict(str, object)',
        'type': 'str',
        'description': 'str',
        'directives': 'list[str]',
        'attributes': 'dict(str, object)',
        'artifacts': 'dict(str, object)'
    }

    attribute_map = {
        'derived_from': 'derived_from',
        'properties': 'properties',
        'requirements': 'requirements',
        'interfaces': 'interfaces',
        'capabilities': 'capabilities',
        'type': 'type',
        'description': 'description',
        'directives': 'directives',
        'attributes': 'attributes',
        'artifacts': 'artifacts'
    }

    def __init__(self, derived_from=None, properties=None, requirements=None, interfaces=None, capabilities=None, type=None, description=None, directives=None, attributes=None, artifacts=None):  # noqa: E501
        """NodeTemplate - a model defined in Swagger"""  # noqa: E501

        self._derived_from = None
        self._properties = None
        self._requirements = None
        self._interfaces = None
        self._capabilities = None
        self._type = None
        self._description = None
        self._directives = None
        self._attributes = None
        self._artifacts = None
        self.discriminator = None

        if derived_from is not None:
            self.derived_from = derived_from
        if properties is not None:
            self.properties = properties
        if requirements is not None:
            self.requirements = requirements
        if interfaces is not None:
            self.interfaces = interfaces
        if capabilities is not None:
            self.capabilities = capabilities
        if type is not None:
            self.type = type
        if description is not None:
            self.description = description
        if directives is not None:
            self.directives = directives
        if attributes is not None:
            self.attributes = attributes
        if artifacts is not None:
            self.artifacts = artifacts

    @property
    def derived_from(self):
        """Gets the derived_from of this NodeTemplate.  # noqa: E501


        :return: The derived_from of this NodeTemplate.  # noqa: E501
        :rtype: str
        """
        return self._derived_from

    @derived_from.setter
    def derived_from(self, derived_from):
        """Sets the derived_from of this NodeTemplate.


        :param derived_from: The derived_from of this NodeTemplate.  # noqa: E501
        :type: str
        """

        self._derived_from = derived_from

    @property
    def properties(self):
        """Gets the properties of this NodeTemplate.  # noqa: E501


        :return: The properties of this NodeTemplate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this NodeTemplate.


        :param properties: The properties of this NodeTemplate.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def requirements(self):
        """Gets the requirements of this NodeTemplate.  # noqa: E501


        :return: The requirements of this NodeTemplate.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this NodeTemplate.


        :param requirements: The requirements of this NodeTemplate.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._requirements = requirements

    @property
    def interfaces(self):
        """Gets the interfaces of this NodeTemplate.  # noqa: E501


        :return: The interfaces of this NodeTemplate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """Sets the interfaces of this NodeTemplate.


        :param interfaces: The interfaces of this NodeTemplate.  # noqa: E501
        :type: dict(str, object)
        """

        self._interfaces = interfaces

    @property
    def capabilities(self):
        """Gets the capabilities of this NodeTemplate.  # noqa: E501


        :return: The capabilities of this NodeTemplate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this NodeTemplate.


        :param capabilities: The capabilities of this NodeTemplate.  # noqa: E501
        :type: dict(str, object)
        """

        self._capabilities = capabilities

    @property
    def type(self):
        """Gets the type of this NodeTemplate.  # noqa: E501


        :return: The type of this NodeTemplate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeTemplate.


        :param type: The type of this NodeTemplate.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def description(self):
        """Gets the description of this NodeTemplate.  # noqa: E501


        :return: The description of this NodeTemplate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NodeTemplate.


        :param description: The description of this NodeTemplate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def directives(self):
        """Gets the directives of this NodeTemplate.  # noqa: E501


        :return: The directives of this NodeTemplate.  # noqa: E501
        :rtype: list[str]
        """
        return self._directives

    @directives.setter
    def directives(self, directives):
        """Sets the directives of this NodeTemplate.


        :param directives: The directives of this NodeTemplate.  # noqa: E501
        :type: list[str]
        """

        self._directives = directives

    @property
    def attributes(self):
        """Gets the attributes of this NodeTemplate.  # noqa: E501


        :return: The attributes of this NodeTemplate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this NodeTemplate.


        :param attributes: The attributes of this NodeTemplate.  # noqa: E501
        :type: dict(str, object)
        """

        self._attributes = attributes

    @property
    def artifacts(self):
        """Gets the artifacts of this NodeTemplate.  # noqa: E501


        :return: The artifacts of this NodeTemplate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this NodeTemplate.


        :param artifacts: The artifacts of this NodeTemplate.  # noqa: E501
        :type: dict(str, object)
        """

        self._artifacts = artifacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeTemplate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeTemplate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
